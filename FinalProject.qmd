---
title: "Stats 155 Final Project, Popularity of Netflix Films Based on Viewership
"
author: "Andre Mojica, Nadezhda Dominguez Salinas, Yeshe Jangchup, Ramatoulaye Bah"
format: html
editor: visual
---

## Libraries:

```{r}
#| message: false

library(tidyverse)
library(ggplot2)
```

## Data Cleaning:

```{r}
#| results: 'hide'
#| message: false

#The runtime of the shows listed is in minutes and represents how long on average ONE episode of the show is/how long the movie is.

# Original Data from Kaggle and removed variables not interested in. Using select().
movieTitles <- read_csv("titles.csv") %>% 
  rename(show_title = title) %>% 
  mutate(seasons = ifelse(is.na(seasons), 0, seasons)) %>% 
  select(-type, -description, -age_certification, -imdb_id, -id) 

# IMDB Database and removed variables not interested in.
globalViewership <- read_csv("all-weeks-global.csv") %>% 
  select(-season_title, -runtime, -weekly_views, -episode_launch_details, -weekly_rank) %>% 
  mutate(week = as.character(week)) %>% 
  filter(grepl('2022', week)) %>% 
  group_by(show_title, category) %>% 
  summarise(total_views = sum(weekly_hours_viewed), 
            cumulative_top10 = sum(cumulative_weeks_in_top_10)) %>% 
  mutate(total_views = total_views/10000)


# The cleaned dataset afteer joining both movieTitles and globalViewership data. Cleaned for very nieche outliers (consulted with Jed).
cleaned_data <- globalViewership %>% 
  inner_join(movieTitles, by = "show_title") %>% 
  mutate(genre1=gsub(",.*","]",genres), 
         filteredproduction_countries=gsub(",.*","]",production_countries)) %>% 
  select(-genres, -production_countries) %>% 
  filter(cumulative_top10 < 100)

counted_genres <- cleaned_data %>% 
  group_by(genre1) %>% 
  filter(cumulative_top10 < 100) %>% 
  summarise(count = n(), .groups = 'drop') %>%
  filter(count >= 10)


# Final Dataset, it has titles that only have genres that appear more than 10 times in the Netlfix Top 10.
filtered_data <- cleaned_data %>%
  semi_join(counted_genres, by = "genre1")

# Introduction (Table 1)
summary(filtered_data)
```

## Visualizations:

> Boxplot that shows the runtime of each type of media (category).

```{r}
#| results: 'hide'
#| message: false

ggplot(cleaned_data, aes(x = runtime, category)) +
  geom_boxplot() +
  labs(title = "Runtime of shows based on the media type",
       x = "Media Runtime (Minutes)",
       y = "Media Category") +
  theme_bw()
```

> Scatterplot that addresses our main predictor of interest. Total hours viewed of a Netlfix title predicted by its runtime.

```{r}
#| results: 'hide'
#| message: false

ggplot(filtered_data, aes(x = runtime, y = total_views)) +
  geom_point() +
  labs(title = "Total Views on Media vs Runtime", 
       x = "Media Runtime (Minutes)",
       y = "Total Hours Viewed (in 10000 Hours)") +
  theme_bw()
```

> Barplot that shows how many Netlfix titles in the top 10 that have are of a certain genre. This was filtered to only display the genres with 10 or more observations.

```{r}
#| results: 'hide'
#| message: false

ggplot(filtered_data, aes(x = genre1)) +
  geom_bar() +
  labs(title = "Number of Shows per Genre", x = "Title Genre") +
  theme_bw()
```

> Both visualizations below show the total hours viewed predicted by TMDB scores and IMDB scores (two different rating scores that do the same thing).

```{r}
#| results: 'hide'
#| message: false

ggplot(cleaned_data, aes(x = tmdb_score, y = total_views, color = category)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "TMDb Score vs Total Hours Viewed",
       x = "TMDb Score",
       y = "Total Hours Viewed (10,000s)") +
  theme_bw()
```

```{r}
#| results: 'hide'
#| message: false

cleaned_data %>%
  ggplot(aes(x = imdb_score, y = total_views, color = category)) +
  geom_point(alpha = 0.6) +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "IMDb Score vs Total Hours Viewed",
       x = "IMDb Score",
       y = "Total Hours Viewed (in 10000s)") +
  theme_bw()

```

## Model Testing:

```{r}
#| message: false

# Testing different predictors for the total hours viewed.
model1 <- lm(total_views ~ runtime, filtered_data)
model2 <- lm(total_views ~ runtime + cumulative_top10, filtered_data)
model3 <- lm(total_views ~ imdb_score + tmdb_score, filtered_data)

# The summaries for each testing model, this is where we dictate whether or not these are good predictors. 
summary(model1)
summary(model2)
summary(model3)

# The final model that best illustrates our research question, and our data explorations.
model_main <- lm(total_views ~ runtime + category + genre1 + cumulative_top10, filtered_data)
summary(model_main)
```

```{r}
#| message: false

# Test to compare our main model statement with a nested model that has only runtime and cumulative_top10 as predictors.
anova(model2, model_main)
```

```{r}
#| message: false

# Getting the coefficients of our main model statement.
coef(model_main)
```
