ggplot(filtered_data, aes(x = runtime, y = weekly_hours_viewed)) +
geom_point() +
labs(title = "Total Views on Media vs Runtime",
x = "Media Runtime (Minutes)",
y = "Total Hours Viewed (in 10000 minutes)") +
theme_bw()
ggplot(filtered_data, aes(x = runtime, y = total_views)) +
geom_point() +
labs(title = "Total Views on Media vs Runtime",
x = "Media Runtime (Minutes)",
y = "Total Hours Viewed (in 10000 minutes)") +
theme_bw()
ggplot(filtered_data, aes(x = filteredproduction_countries)) +
geom_bar()
ggplot(filtered_data, aes(x = total_views)) +
geom_bar()
ggplot(filtered_data, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot()
#The runtime of the shows listed is in minutes and represents how long on average ONE episode of the show is/how long the movie is.
movieTitles <- read_csv("titles.csv") %>%
rename(show_title = title) %>%
mutate(seasons = ifelse(is.na(seasons), 0, seasons)) %>%
select(-type, -description, -age_certification, -imdb_id, -id)
globalViewership <- read_csv("all-weeks-global.csv") %>%
select(-season_title, -runtime, -weekly_views, -episode_launch_details, -weekly_rank) %>%
mutate(week = as.character(week)) %>%
filter(grepl('2022', week)) %>%
group_by(show_title, category) %>%
summarise(total_views = sum(weekly_hours_viewed),
cumulative_top10 = sum(cumulative_weeks_in_top_10)) %>%
mutate(total_views = total_views/10000)
cleaned_data <- globalViewership %>%
inner_join(movieTitles, by = "show_title")
cleaned_data <- cleaned_data %>%
mutate(genre1=gsub(",.*","]",genres),
filteredproduction_countries=gsub(",.*","]",production_countries)) %>%
select(-genres, -production_countries) %>%
filter(cumulative_top10 < 100)
counted_genres <- cleaned_data %>%
group_by(genre1) %>%
filter(cumulative_top10 < 100) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count >= 10)
counted_countries <- cleaned_data %>%
group_by(filteredproduction_countries) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count >= 10)
filtered_data <- cleaned_data %>%
semi_join(counted_genres, by = "genre1")
filtered_data2 <- cleaned_data %>%
semi_join(counted_countries, by = "filteredproduction_countries")
# Introduction (Table 1)
summary(filtered_data)
View(filtered_data2)
View(movieTitles)
View(filtered_data)
View(counted_genres)
View(counted_countries)
library(tidyverse)
library(ggplot2)
#The runtime of the shows listed is in minutes and represents how long on average ONE episode of the show is/how long the movie is.
movieTitles <- read_csv("titles.csv") %>%
rename(show_title = title) %>%
mutate(seasons = ifelse(is.na(seasons), 0, seasons)) %>%
select(-type, -description, -age_certification, -imdb_id, -id)
globalViewership <- read_csv("all-weeks-global.csv") %>%
select(-season_title, -runtime, -weekly_views, -episode_launch_details, -weekly_rank) %>%
mutate(week = as.character(week)) %>%
filter(grepl('2022', week)) %>%
group_by(show_title, category) %>%
summarise(total_views = sum(weekly_hours_viewed),
cumulative_top10 = sum(cumulative_weeks_in_top_10)) %>%
mutate(total_views = total_views/10000)
cleaned_data <- globalViewership %>%
inner_join(movieTitles, by = "show_title")
cleaned_data <- cleaned_data %>%
mutate(genre1=gsub(",.*","]",genres),
filteredproduction_countries=gsub(",.*","]",production_countries)) %>%
select(-genres, -production_countries) %>%
filter(cumulative_top10 < 100)
counted_genres <- cleaned_data %>%
group_by(genre1) %>%
filter(cumulative_top10 < 100) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count >= 10)
counted_countries <- cleaned_data %>%
group_by(filteredproduction_countries) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count >= 5)
filtered_data <- cleaned_data %>%
semi_join(counted_genres, by = "genre1")
filtered_data2 <- cleaned_data %>%
semi_join(counted_countries, by = "filteredproduction_countries")
# Introduction (Table 1)
summary(filtered_data)
View(counted_countries)
#The runtime of the shows listed is in minutes and represents how long on average ONE episode of the show is/how long the movie is.
movieTitles <- read_csv("titles.csv") %>%
rename(show_title = title) %>%
mutate(seasons = ifelse(is.na(seasons), 0, seasons)) %>%
select(-type, -description, -age_certification, -imdb_id, -id)
globalViewership <- read_csv("all-weeks-global.csv") %>%
select(-season_title, -runtime, -weekly_views, -episode_launch_details, -weekly_rank) %>%
mutate(week = as.character(week)) %>%
filter(grepl('2022', week)) %>%
group_by(show_title, category) %>%
summarise(total_views = sum(weekly_hours_viewed),
cumulative_top10 = sum(cumulative_weeks_in_top_10)) %>%
mutate(total_views = total_views/10000)
cleaned_data <- globalViewership %>%
inner_join(movieTitles, by = "show_title")
cleaned_data <- cleaned_data %>%
mutate(genre1=gsub(",.*","]",genres),
filteredproduction_countries=gsub(",.*","]",production_countries)) %>%
select(-genres, -production_countries) %>%
filter(cumulative_top10 < 100)
counted_genres <- cleaned_data %>%
group_by(genre1) %>%
filter(cumulative_top10 < 100) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count >= 10)
counted_countries <- cleaned_data %>%
group_by(filteredproduction_countries) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count > 6)
filtered_data <- cleaned_data %>%
semi_join(counted_genres, by = "genre1")
filtered_data2 <- cleaned_data %>%
semi_join(counted_countries, by = "filteredproduction_countries")
# Introduction (Table 1)
summary(filtered_data)
View(counted_countries)
ggplot(filtered_data, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot()
View(filtered_data2)
ggplot(filtered_data2, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot()
#The runtime of the shows listed is in minutes and represents how long on average ONE episode of the show is/how long the movie is.
movieTitles <- read_csv("titles.csv") %>%
rename(show_title = title) %>%
mutate(seasons = ifelse(is.na(seasons), 0, seasons)) %>%
select(-type, -description, -age_certification, -imdb_id, -id)
globalViewership <- read_csv("all-weeks-global.csv") %>%
select(-season_title, -runtime, -weekly_views, -episode_launch_details, -weekly_rank) %>%
mutate(week = as.character(week)) %>%
filter(grepl('2022', week)) %>%
group_by(show_title, category) %>%
summarise(total_views = sum(weekly_hours_viewed),
cumulative_top10 = sum(cumulative_weeks_in_top_10)) %>%
mutate(total_views = total_views/10000)
cleaned_data <- globalViewership %>%
inner_join(movieTitles, by = "show_title")
cleaned_data <- cleaned_data %>%
mutate(genre1=gsub(",.*","]",genres),
filteredproduction_countries=gsub(",.*","]",production_countries)) %>%
select(-genres, -production_countries) %>%
filter(cumulative_top10 < 100)
counted_genres <- cleaned_data %>%
group_by(genre1) %>%
filter(cumulative_top10 < 100) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count >= 10)
counted_countries <- cleaned_data %>%
group_by(filteredproduction_countries) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count >= 9)
filtered_data <- cleaned_data %>%
semi_join(counted_genres, by = "genre1")
filtered_data2 <- cleaned_data %>%
semi_join(counted_countries, by = "filteredproduction_countries")
# Introduction (Table 1)
summary(filtered_data)
ggplot(filtered_data2, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot()
ggplot(filtered_data2, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot()
View(counted_countries)
counted_countries <- cleaned_data %>%
group_by(filteredproduction_countries) %>%
summarise(count = n(), .groups = 'drop') %>%
filter(count >= 10)
filtered_data2 <- cleaned_data %>%
semi_join(counted_countries, by = "filteredproduction_countries")
ggplot(filtered_data2, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot()
ggplot(filtered_data2, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot() +
labs(title = "Popularity vs Country of Origin",
subtitle = "The country of origin is based on where the show was primarily produced, not based of the langunage primarily spoken in the show."
x = "Total Hours Viewed (in 10000 Hours",
ggplot(filtered_data2, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot() +
labs(title = "Popularity vs Country of Origin",
subtitle = "The country of origin is based on where the show was primarily produced, not based of the langunage primarily spoken in the show.",
x = "Total Hours Viewed (in 10000 Hours",
y = "Country of Origin")
ggplot(filtered_data2, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot() +
labs(title = "Popularity vs Country of Origin",
subtitle = "The country of origin is based on where the show was primarily produced, not based of the langunage primarily spoken in the show.",
x = "Total Hours Viewed (in 10000 Hours",
y = "Country of Origin") +
theme_bw()
ggplot(filtered_data2, aes(x = total_views, y = filteredproduction_countries)) +
geom_boxplot() +
labs(title = "Popularity vs Country of Origin",
subtitle = "The country of origin is based on where the show was primarily produced, not based of the langunage primarily spoken in the show.",
x = "Total Hours Viewed (in 10000 Hours)",
y = "Country of Origin") +
theme_bw()
ggplot(filtered_data, aes(x = runtime, y = total_views)) +
geom_point() +
labs(title = "Total Views on Media vs Runtime",
x = "Media Runtime (Minutes)",
y = "Total Hours Viewed (in 10000 Hours)") +
theme_bw()
ggplot(cleaned_data, aes(x = tmdb_score, y = weekly_hours_viewed, color = category)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "TMDb Score vs Weekly Hours Viewed",
x = "TMDb Score",
y = "Weekly Hours Viewed (10,000s)") +
theme_bw()
cleaned_data %>%
ggplot(aes(x = imdb_score, y = total_views, color = category)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "IMDb Score vs Weekly Hours Viewed",
x = "IMDb Score",
y = "Weekly Hours Viewed") +
theme_bw()
ggplot(cleaned_data, aes(x = tmdb_score, y = total_views, color = category)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "TMDb Score vs Weekly Hours Viewed",
x = "TMDb Score",
y = "Weekly Hours Viewed (10,000s)") +
theme_bw()
sample1 <- cleaned_data %>%
filter((category == "TV (English)" | category == "TV (Non-English)") & seasons > 0)
ggplot(sample1, aes(x = seasons, fill = genre1)) +
geom_histogram(stat = "identity")
sample1 <- cleaned_data %>%
filter((category == "TV (English)" | category == "TV (Non-English)") & seasons > 0)
ggplot(sample1, aes(x = seasons, fill = genre1)) +
geom_histogram()
sample1 <- cleaned_data %>%
filter((category == "TV (English)" | category == "TV (Non-English)") & seasons > 0)
ggplot(sample1, aes(x = seasons, fill = genre1)) +
geom_bar()
sample1 <- cleaned_data %>%
filter((category == "TV (English)" | category == "TV (Non-English)") & seasons > 0)
ggplot(sample1, aes(x = seasons, fill = genre1)) +
geom_bar()
model1 <- lm(total_views ~ runtime + category + cumulative_top10 + genre1, cleaned_data)
model2 <- lm(total_views ~ cumulative_top10 + filteredproduction_countries, cleaned_data)
summary(model1)
summary(model2)
model1 <- lm(total_views ~ runtime + category + genre1 + season + cumulative_top10 + genre1, cleaned_data)
model1 <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, cleaned_data)
model2 <- lm(total_views ~ cumulative_top10 + filteredproduction_countries, cleaned_data)
summary(model1)
summary(model2)
model1 <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, filtered_data)
model2 <- lm(total_views ~ cumulative_top10 + filteredproduction_countries, cleaned_data)
summary(model1)
summary(model2)
model1 <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, filtered_data)
model2 <- lm(total_views ~ cumulative_top10 + filteredproduction_countries, filtered_data)
summary(model1)
summary(model2)
ggplot(cleaned_data, aes(x = tmdb_score, y = total_views, color = category)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "TMDb Score vs Total Hours Viewed",
x = "TMDb Score",
y = "Total Hours Viewed (10,000s)") +
theme_bw()
cleaned_data %>%
ggplot(aes(x = imdb_score, y = total_views, color = category)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "IMDb Score vs Total Hours Viewed",
x = "IMDb Score",
y = "Total Hours Viewed") +
theme_bw()
cleaned_data %>%
ggplot(aes(x = imdb_score, y = total_views, color = category)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "IMDb Score vs Total Hours Viewed",
x = "IMDb Score",
y = "Total Hours Viewed (in 10000s") +
theme_bw()
cleaned_data %>%
ggplot(aes(x = imdb_score, y = total_views, color = category)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", se = FALSE) +
labs(title = "IMDb Score vs Total Hours Viewed",
x = "IMDb Score",
y = "Total Hours Viewed (in 10000s)") +
theme_bw()
model1 <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, filtered_data)
model2 <- lm(total_views ~ filteredproduction_countries, filtered_data)
summary(model1)
summary(model2)
model1 <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, filtered_data)
model2 <- lm(total_views ~ filteredproduction_countries, filtered_data2)
summary(model1)
summary(model2)
model_main <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, filtered_data)
model2 <- lm(total_views ~ genre1 + filteredproduction_countries, filtered_data2)
summary(model1)
summary(model2)
model_main <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, filtered_data)
model2 <- lm(total_views ~ runtime, filtered_data)
model3 <- lm(total_views ~ runtime + seasons + cumulative_top10, filtered_data)
model4 <- lm(total_views ~ genre1 + filteredproduction_countries, filtered_data2)
summary(model1)
summary(model2)
summary(model3)
summary(model4)
model_main <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, filtered_data)
model2 <- lm(total_views ~ runtime, filtered_data)
model3 <- lm(total_views ~ runtime + seasons + cumulative_top10, filtered_data)
model4 <- lm(total_views ~ genre1 + filteredproduction_countries, filtered_data2)
model5 <- lm(total_views ~ imdb_score + tmdb_score, filtered_data)
summary(model_main)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
model_main <- lm(total_views ~ runtime + category + genre1 + seasons + cumulative_top10 + genre1, filtered_data)
model2 <- lm(total_views ~ runtime, filtered_data)
model3 <- lm(total_views ~ runtime + seasons + cumulative_top10, filtered_data)
model4 <- lm(total_views ~ genre1 + filteredproduction_countries, filtered_data2)
model5 <- lm(total_views ~ imdb_score + tmdb_score, filtered_data)
summary(model_main)
summary(model2)
summary(model3)
summary(model4)
summary(model5)
coef(model_main)
coef(model_main)
confint(main_model, level = 0.95)
coef(model_main)
confint(model_main, level = 0.95)
confint(lungModel, level = 0.95)
fev <- read_csv("https://mac-stat.github.io/data/fev.csv")
lungModel = lm(fev ~ smoke + age + height + sex, data = fev)
summary(lungModel)
confint(lungModel, level = 0.95)
coef(summary(lungModel))
test1 <- lm(runtime ~ category, filtered_data)
test2 <- lm(total_hours_viewed ~ category, filtered_data)
test1 <- lm(runtime ~ category, filtered_data)
test2 <- lm(total_views ~ category, filtered_data)
summary(test1)
summary(test2)
library(pracma)
library(dplyr)
M = matrix(c(50,10,
10,2), nrow = 2, byrow = TRUE) %>% rref()
M
M = matrix(c(-2,10,
10,-50), nrow = 2, byrow = TRUE) %>% rref()
M
# Read in mushroom data
mushrooms <- read_csv("https://Mac-STAT.github.io/data/mushrooms.csv")
library(ggplot2)
library(dplyr)
library(ggmosaic)
library(broom)
library(readr)
# Read in mushroom data
mushrooms <- read_csv("https://Mac-STAT.github.io/data/mushrooms.csv")
ggplot(mushrooms, aes(x = cap_surface, fill = as.factor(poisonous))) +
geom_bar(position = "dodge") +
labs(
title = "Poisonous Mushrooms by Cap Surface",
x = "Cap Surface Type",
y = "Count",
fill = "Poisonous"
) +
scale_fill_manual(values = c("lightblue", "salmon"), labels = c("Non-poisonous", "Poisonous")) +
theme_minimal()
mushroomCount = table(mushrooms$poisonous, mushrooms$cap_surface)
mushroomCount
check = mushrooms %>%
group_by(cap_shape) %>%
summarise(n = n())
mushroom_glm = glm(poisonous ~ cap_shape + gill_size, data = mushrooms)
exp(coef(summary(mushroom_glm)))
View(check)
View(mushrooms)
mushroomGLM = glm(poisonous ~ cap_shape + gill_size, data = mushrooms)
exp(coef(summary(mushroomGLM)))
modelMain <- glm(poisonous ~ cap_shape + gill_size, data = mushrooms, family = "binomial")
modelNested <- glm(poisonous ~ gill_size, data = mushrooms, family = "binomial")
anova_result <- anova(modelNested, modelMain, test = "Chisq")
anova_result
summary(modelMain)
model1 <- glm(poisonous ~ cap_shape, data = mushrooms, family = "binomial")
model_shape <- augment(model1, type.predict = "response")
model_shape_gill <- augment(full_model, type.predict= "response")
model1 <- glm(poisonous ~ cap_shape, data = mushrooms, family = "binomial")
model_shape <- augment(model1, type.predict = "response")
model_shape_gill <- augment(modelMain, type.predict= "response")
model_shape_gill %>%
mutate(predictPoison = .fitted >= 0.5) %>%
count(poisonous, predictPoison)
model1 <- glm(poisonous ~ cap_shape, data = mushrooms, family = "binomial")
model2 <- glm(poisonous ~ cap_shape + gill_size, data = mushrooms, family = "binomial")
tableShape <- augment(model1, type.predict = "response")
tableShapeGill <- augment(model2, type.predict= "response")
tableShape %>%
mutate(predictPoison = .fitted >= 0.5) %>%
count(poisonous, predictPoison)
tableShapeGill %>%
mutate(predictPoison = .fitted >= 0.5) %>%
count(poisonous, predictPoison)
library(ggplot2)
library(dplyr)
library(ggmosaic)
library(broom)
library(readr)
# Read in mushroom data
mushrooms <- read_csv("https://Mac-STAT.github.io/data/mushrooms.csv")
ggplot(mushrooms, aes(x = cap_surface, fill = as.factor(poisonous))) +
geom_bar(position = "dodge") +
labs(
title = "Poisonous Mushrooms by Surface Type",
x = "Surface Type",
y = "Count",
fill = "Poisonous"
) +
scale_fill_manual(values = c("lightblue", "salmon"), labels = c("Non-poisonous", "Poisonous")) +
theme_minimal()
ggplot(mushrooms, aes(x = gill_size, fill = as.factor(poisonous))) +
geom_bar(position = "dodge") +
labs(
title = "Poisonous Mushrooms by Gill Size",
x = "Gill Size",
y = "Count",
fill = "Poisonous"
) +
scale_fill_manual(values = c("lightblue", "salmon"), labels = c("Non-poisonous", "Poisonous")) +
theme_minimal()
mushroomCount = table(mushrooms$poisonous, mushrooms$cap_surface)
mushroomCount
mushroomGLM = glm(poisonous ~ cap_shape + gill_size, data = mushrooms)
exp(coef(summary(mushroomGLM)))
modelMain <- glm(poisonous ~ cap_shape + gill_size, data = mushrooms, family = "binomial")
modelNested <- glm(poisonous ~ gill_size, data = mushrooms, family = "binomial")
anova_result <- anova(modelNested, modelMain, test = "Chisq")
anova_result
summary(modelMain)
model1 <- glm(poisonous ~ cap_shape, data = mushrooms, family = "binomial")
model2 <- glm(poisonous ~ cap_shape + gill_size, data = mushrooms, family = "binomial")
tableShape <- augment(model1, type.predict = "response")
tableShapeGill <- augment(model2, type.predict= "response")
tableShape %>%
mutate(predictPoison = .fitted >= 0.5) %>%
count(poisonous, predictPoison)
tableShapeGill %>%
mutate(predictPoison = .fitted >= 0.5) %>%
count(poisonous, predictPoison)
# Model 1 (cap_shape only)
TP1 = 604
TN1 = 3980
FP1 = 228
FN1 = 3312
(TP1 + TN1) / (TP1 + TN1 + FP1 + FN1)
TP1 / (TP1+FN1)
TN1 / (TN1 + FP1)
# Model 2 (cap_shape + gill_size)
TP2 = 2224
TN2 = 3952
FP2 = 256
FN2 = 1692
(TP2 + TN2) / (TP2 + TN2 + FP2 + FN2)
TP2 / (TP2 + FN2)
ggplot(mushrooms, aes(x = cap_surface, fill = as.factor(poisonous))) +
geom_bar(position = "dodge") +
labs(
title = "Poisonous Mushrooms by Surface Type",
x = "Surface Type",
y = "Count",
fill = "Poisonous"
) +
scale_fill_manual(values = c("cyan", "red"), labels = c("Non-poisonous", "Poisonous")) +
theme_minimal()
ggplot(mushrooms, aes(x = cap_surface, fill = as.factor(poisonous))) +
geom_bar(position = "dodge") +
labs(
title = "Poisonous Mushrooms by Surface Type",
x = "Surface Type",
y = "Count",
fill = "Poisonous"
) +
scale_fill_manual(values = c("blue", "orange"), labels = c("Non-poisonous", "Poisonous")) +
theme_minimal()
ggplot(mushrooms, aes(x = cap_surface, fill = as.factor(poisonous))) +
geom_bar(position = "dodge") +
labs(
title = "Poisonous Mushrooms by Surface Type",
x = "Surface Type",
y = "Count",
fill = "Poisonous"
) +
scale_fill_manual(values = c("darkgreen", "red"), labels = c("Non-poisonous", "Poisonous")) +
theme_minimal()
